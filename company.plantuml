@startuml

title __DEComputationalPracticum's Class Diagram__\n

  namespace com.company {
    abstract class com.company.DESolver {
        # f : DoubleBinaryOperator
        + DESolver()
        + solve()
        {abstract} # getNextApproximation()
    }
  }
  

  namespace com.company {
    class com.company.EulerMethod {
        + EulerMethod()
        # getNextApproximation()
    }
  }
  

  namespace com.company {
    class com.company.ExactMethod {
        + ExactMethod()
        # getNextApproximation()
    }
  }
  

  namespace com.company {
    class com.company.ImprovedEulerMethod {
        + ImprovedEulerMethod()
        # getNextApproximation()
    }
  }
  

  namespace com.company {
    class com.company.JGridGraph {
        {static} - GRID_LINES_NUMBER : int
        {static} - NOTCH_SIZE : int
        {static} - PRECISION : int

        - x0 : double
        - X : double
        - N : int
        - h : double

        - xAxisName : String
        - yAxisName : String

        - polylines : Vector<double[]>
        - colors : Vector<Color>
        - names : Vector<String>

        + JGridGraph()
        + addPolyline()
        + clearAndSetNewGrid()
        # paintComponent()
    }
  }
  

  namespace com.company {
    class com.company.Main {
        {static} + F : DoubleBinaryOperator
        {static} + DEFAULT_x0 : double
        {static} + DEFAULT_X : double
        {static} + DEFAULT_y0 : double
        {static} + DEFAULT_N : int

        {static} + PRECISION : int

        {static} + window : JFrame
        {static} - tablesTabs : JTabbedPane

        {static} - solutionsGraph : JGridGraph
        {static} - errorsGraph : JGridGraph
        {static} - totalErrorGraph : JGridGraph
        {static} - graphs : List<SimpleEntry<String, JComponent>>
        {static} - graphsTabs : JTabbedPane

        {static} - x0Field : JFormattedTextField
        {static} - XField : JFormattedTextField
        {static} - y0Field : JFormattedTextField
        {static} - NField : JSpinner
        {static} - startButton : JButton
        {static} - fields : List<SimpleEntry<String, JComponent>>

        {static} - exactSolverInfo : SolutionDisplayInfo
        {static} - numericalSolversInfo : SolutionDisplayInfo[]

        {static} + main()
        {static} + round()
        {static} + getSolution()
        {static} - solveAndDisplay()
    }
  }
  

  namespace com.company {
    class com.company.RungeKuttaMethod {
        + RungeKuttaMethod()
        # getNextApproximation()
    }
  }
  

  namespace com.company {
    class com.company.SolutionDisplayInfo {
        + solver : DESolver
        + color : Color
        + name : String
        + SolutionDisplayInfo()
    }
  }
  

  com.company.EulerMethod -up-|> com.company.DESolver
  com.company.ExactMethod -up-|> com.company.DESolver
  com.company.ImprovedEulerMethod -up-|> com.company.EulerMethod
  com.company.JGridGraph -up-|> javax.swing.JPanel
  com.company.RungeKuttaMethod -up-|> com.company.DESolver
  com.company.SolutionDisplayInfo o-- com.company.DESolver : solver
  com.company.Main o-- com.company.SolutionDisplayInfo : info
  com.company.Main o-- com.company.JGridGraph : graph


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
